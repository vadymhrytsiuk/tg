import telebot
import gspread
import ssl
from oauth2client.service_account import ServiceAccountCredentials

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ SSL
try:
    ssl.create_default_context()
except AttributeError:
    raise ImportError("SSL –º–æ–¥—É–ª—å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —É –≤–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ.")

# Telegram-–±–æ—Ç
TOKEN = "7588961908:AAFjm3jHM5vdlFQGDKYKxEXuPLwO8RdVDuM"
bot = telebot.TeleBot(TOKEN)

# Google Sheets
SHEET_ID = "19cFGOkNgm0hcmy3vD0fRjPxdJb7kOsl0iX19jolTf6I"
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
CREDS_FILE = "ecolandbot-8009fea304c0.json"

creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).sheet1

# üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
EXPENSE_CATEGORIES = ["–î–æ–±—Ä–∏–≤–∞", "–ó–ó–†", "–†–æ–±–æ—Ç–∞", "–Ü–Ω—à–µ"]
CATEGORY_COLUMNS = {"–î–æ–±—Ä–∏–≤–∞": "A", "–ó–ó–†": "E", "–†–æ–±–æ—Ç–∞": "I", "–Ü–Ω—à–µ": "M"}
CULTURES = ["–ü–æ–ª—É–Ω–∏—Ü—è", "–ú–∞–ª–∏–Ω–∞", "–ë—Ä–æ–∫–æ–ª–ª—ñ", "–ü–µ–∫—ñ–Ω—Å—å–∫–∞", "–ë—ñ–ª–æ–∫–∞—á–∞–Ω–Ω–∞"]

# üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –¥–∞–Ω—ñ
user_data = {}

# üîπ **–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start**
@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {"type": None}  # –û—á–∏—â–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º –≤–∏–±–æ—Ä–æ–º
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("–í–∏—Ç—Ä–∞—Ç–∏", "–î–æ—Ö–æ–¥–∏", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", reply_markup=markup)

# üîπ **–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–í–∏—Ç—Ä–∞—Ç–∏"**
@bot.message_handler(func=lambda message: message.text == "–í–∏—Ç—Ä–∞—Ç–∏")
def show_expenses(message):
    user_data[message.chat.id] = {"type": "expense"}  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*EXPENSE_CATEGORIES)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏—Ç—Ä–∞—Ç:\n/start", reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "expense" and "category" not in user_data[message.chat.id])
def get_expense_category(message):
    if message.text not in EXPENSE_CATEGORIES:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
        return
    user_data[message.chat.id]["category"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∏—Ç—Ä–∞—Ç–∏:\n/start")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "expense" and "name" not in user_data[message.chat.id])
def get_expense_name(message):
    user_data[message.chat.id]["name"] = message.text
    bot.send_message(message.chat.id, "–î–æ–¥–∞–π—Ç–µ –ø—Ä–∏–º—ñ—Ç–∫—É (–¥–∞—Ç–∞, –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–æ—â–æ):\n/start")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "expense" and "note" not in user_data[message.chat.id])
def get_expense_note(message):
    user_data[message.chat.id]["note"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É (–≥—Ä–Ω):")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "expense" and "amount" not in user_data[message.chat.id])
def get_expense_amount(message):
    try:
        user_data[message.chat.id]["amount"] = float(message.text)
        save_expense(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å—É–º–∏.")

# üîπ **–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Å—É –≤–∏—Ç—Ä–∞—Ç —É Google Sheets**
def save_expense(message):
    try:
        category = user_data[message.chat.id].get("category")
        column = CATEGORY_COLUMNS.get(category)
        last_row = len(sheet.col_values(ord(column) - 64)) + 1
        sheet.update(f"{column}{last_row}", [[user_data[message.chat.id]["name"]]])
        sheet.update(f"{chr(ord(column) + 1)}{last_row}", [[user_data[message.chat.id]["note"]]])
        sheet.update(f"{chr(ord(column) + 2)}{last_row}", [[user_data[message.chat.id]["amount"]]])
        bot.send_message(message.chat.id, "‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ! –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ /start")
        del user_data[message.chat.id]
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö: {str(e)}")

# üîπ **–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É "–î–æ—Ö–æ–¥–∏"**
@bot.message_handler(func=lambda message: message.text == "–î–æ—Ö–æ–¥–∏")
def show_income(message):
    user_data[message.chat.id] = {"type": "income"}
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*CULTURES)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫—É–ª—å—Ç—É—Ä—É:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "income" and "culture" not in user_data[message.chat.id])
def get_culture(message):
    user_data[message.chat.id]["culture"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: –î–î/–ú–ú):")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "income" and "date" not in user_data[message.chat.id])
def get_income_date(message):
    user_data[message.chat.id]["date"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤–∞–≥—É (–∫–≥):")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "income" and "weight" not in user_data[message.chat.id])
def get_income_weight(message):
    try:
        user_data[message.chat.id]["weight"] = float(message.text)
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (–≥—Ä–Ω/–∫–≥):")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤–∞–≥–∏.")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id]["type"] == "income" and "price" not in user_data[message.chat.id])
def get_income_price(message):
    try:
        user_data[message.chat.id]["price"] = float(message.text)
        save_income(message)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ü—ñ–Ω–∏.")

def save_income(message):
    try:
        last_row = len(sheet.col_values(19)) + 1  # –ö–æ–ª–æ–Ω–∫–∞ S (19 —É ASCII)
        sheet.update(f"S{last_row}", [[user_data[message.chat.id]["culture"]]])
        sheet.update(f"T{last_row}", [[user_data[message.chat.id]["date"]]])
        sheet.update(f"U{last_row}", [[user_data[message.chat.id]["weight"]]])
        sheet.update(f"V{last_row}", [[user_data[message.chat.id]["price"]]])

        total_income = user_data[message.chat.id]["weight"] * user_data[message.chat.id]["price"]
        bot.send_message(message.chat.id, f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ! {total_income} –≥—Ä–Ω. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ /start")

        del user_data[message.chat.id]  # –û—á–∏—Å—Ç–∫–∞ –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –¥–∞–Ω–∏—Ö: {str(e)}")

# üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
from telebot.types import ReplyKeyboardRemove

# üîπ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def get_statistics(message):
    try:
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
        bot.send_message(message.chat.id, "‚è≥ –û—Ç—Ä–∏–º—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", reply_markup=ReplyKeyboardRemove())

        # –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        expenses = sheet.acell("R1").value or "0"
        revenue = sheet.acell("R2").value or "0"
        net_profit = sheet.acell("R3").value or "0"

        # –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        fert_expense = sheet.acell("C1").value or "0"
        ppp_expense = sheet.acell("G1").value or "0"
        work_expense = sheet.acell("K1").value or "0"
        other_expense = sheet.acell("O1").value or "0"

        # –î–∞–Ω—ñ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
        strawberry_weight = sheet.acell("R7").value or "0"
        strawberry_revenue = sheet.acell("R8").value or "0"

        raspberry_weight = sheet.acell("R16").value or "0"
        raspberry_revenue = sheet.acell("R17").value or "0"

        pekinese_weight = sheet.acell("R20").value or "0"
        pekinese_revenue = sheet.acell("R21").value or "0"

        broccoli_weight = sheet.acell("R24").value or "0"
        broccoli_revenue = sheet.acell("R25").value or "0"

        cabbage_weight = sheet.acell("R28").value or "0"
        cabbage_revenue = sheet.acell("R29").value or "0"

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üí∞ –í–∏—Ç—Ä–∞—Ç–∏: *{expenses}* –≥—Ä–Ω\n"
            f"üìà –í–∏—Ä—É—á–∫–∞: *{revenue}* –≥—Ä–Ω\n"
            f"üíµ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: *{net_profit}* –≥—Ä–Ω\n\n"
            "üõ† *–í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏:*\n"
            f"üå± –î–æ–±—Ä–∏–≤–∞: *{fert_expense}* –≥—Ä–Ω\n"
            f"üõ° –ó–ó–†: *{ppp_expense}* –≥—Ä–Ω\n"
            f"üë∑ –†–æ–±–æ—Ç–∞: *{work_expense}* –≥—Ä–Ω\n"
            f"üì¶ –Ü–Ω—à–µ: *{other_expense}* –≥—Ä–Ω\n\n"
            "üåø *–î–∞–Ω—ñ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º:*\n"
            f"üçì –ü–æ–ª—É–Ω–∏—Ü—è: {strawberry_weight} –∫–≥ | {strawberry_revenue} –≥—Ä–Ω\n"
            f"üçá –ú–∞–ª–∏–Ω–∞: {raspberry_weight} –∫–≥ | {raspberry_revenue} –≥—Ä–Ω\n"
            f"ü•¨ –ü–µ–∫—ñ–Ω—Å—å–∫–∞ –∫–∞–ø—É—Å—Ç–∞: {pekinese_weight} –∫–≥ | {pekinese_revenue} –≥—Ä–Ω\n"
            f"ü•¶ –ë—Ä–æ–∫–æ–ª—ñ: {broccoli_weight} –∫–≥ | {broccoli_revenue} –≥—Ä–Ω\n"
            f"ü•¨ –ë—ñ–ª–æ–∫–∞—á–∞–Ω–Ω–∞ –∫–∞–ø—É—Å—Ç–∞: {cabbage_weight} –∫–≥ | {cabbage_revenue} –≥—Ä–Ω\n\n"
            "üîÑ /start"
        )

        bot.send_message(message.chat.id, stats_message, parse_mode="Markdown")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}", reply_markup=ReplyKeyboardRemove())

bot.polling(none_stop=True)
